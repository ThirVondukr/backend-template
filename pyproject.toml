[project]
name = ""
version = "0.0.1"
description = ""
license = { text = "MIT" }
authors = [
    { name = "Doctor", email = "thirvondukr@gmail.com" },
]
requires-python = ">=3.11"
dependencies = [
    "uvloop>=0.17.0; sys_platform != 'win32'",
    "uvicorn>=0.23.2",
    "starlette>=0.27.0",
    "pydantic>=2.2.1",
    "fastapi>=0.101.1",
    "asyncpg>=0.28.0",
    "sqlalchemy>=2.0.20",
    "alembic>=1.11.3",
    "python-dotenv>=1.0.0",
    "anyio>=3.7.1",
    "orjson>=3.9.5",
    "sentry-sdk>=1.29.2",
    "result>=0.13.1",
    "strawberry-graphql>=0.204.0",
    "pydantic-settings>=2.0.3",
]
[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"

[tool]
[tool.pdm]
[tool.pdm.dev-dependencies]
dev = [
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.4.1",
    "pytest>=7.4.0",
    "coverage>=7.2.7",
    "httpx>=0.24.1",
    "ruff>=0.0.284",
    "anyio>=3.7.1",
    "radon>=6.0.1",
    "sqlalchemy-pytest>=0.1.0",
]

[tool.pytest.ini_options]
pythonpath = "src"

[tool.coverage.run]
source = ["src"]
omit = ["src/alembic/*"]
command_line = "-m pytest -v"
concurrency = ["greenlet"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = true
skip_empty = true
precision = 2

[tool.mypy]
plugins = [
    "pydantic.mypy",
    "strawberry.ext.mypy_plugin",
]
exclude = "(alembic)"

follow_imports = "silent"
ignore_missing_imports = true

check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_any_generics = true
no_implicit_optional = true

warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

strict_optional = true
strict_equality = true

[tool.isort]
profile = "black"


[tool.ruff]
src = ["src", "tests"]
fixable = [
    "F",
    "E",
    "W",
    "I",
    "COM",
    "UP",
    "RUF",
]
select = ["ALL"]
ignore = [
    "E501", # Line Length
    "A003", # Class attribute ... is shadowing a python builtin
    "ANN101",
    "ANN102",
    "D", # pydocstyle
    "PD",  # pandas-vet
    "INP",
    "TCH001",
    "TCH002",
    "TCH003",
    "EXE",
    "RUF001",
    "RUF002",
    "RUF003",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.mccabe]
max-complexity = 6

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Query",
]

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator"]
staticmethod-decorators = ["staticmethod"]



[tool.pdm.scripts]
lint = {composite = [
    "black .",
    "ruff . --fix",
    "black .",
    "mypy .",
]}
test = {composite = [
    "coverage run",
    "coverage report",
]}

