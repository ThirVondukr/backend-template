[project]
name = ""
version = "0.0.1"
description = ""
license = { text = "MIT" }
authors = [
    { name = "Doctor", email = "thirvondukr@gmail.com" },
]
requires-python = ">=3.11"
dependencies = [
    "aioinject>=0.34.0",
    "alembic>=1.13.2",
    "asyncpg>=0.29.0",
    "fastapi>=0.111.0",
    "orjson>=3.10.6",
    "pydantic-settings>=2.3.4",
    "pydantic>=2.8.2",
    "python-dotenv>=1.0.1",
    "result>=0.17.0",
    "sentry-sdk>=2.7.1",
    "sqlalchemy>=2.0.31",
    "starlette>=0.37.2",
    "strawberry-graphql>=0.235.1",
    "uvicorn>=0.30.1",
    "uvloop>=0.19.0; sys_platform != \"win32\"",
]
[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"


[tool]
[tool.pdm]
[tool.pdm.dev-dependencies]
dev = [
    "deptry>=0.16.1",
    "mypy>=1.10.1",
    "radon>=6.0.1",
    "ruff>=0.5.0",
]
testing = [
    "anyio>=4.4.0",
    "asgi-lifespan>=2.1.0",
    "coverage>=7.5.4",
    "httpx>=0.27.0",
    "pytest-archon>=0.0.6",
    "pytest>=8.2.2",
    "sqlalchemy-pytest>=0.3.2.post1",
    "typeguard>=4.3.0",
]

[tool.pdm.scripts]
lint = { composite = [
    "ruff . --fix",
    "ruff format .",
    "black .",
    "deptry ./src",
    "mypy .",
] }
test = { composite = [
    "coverage run",
    "coverage report",
] }


[tool.pytest.ini_options]
pythonpath = "src"


[tool.coverage.run]
source = ["src"]
omit = ["src/app/alembic/*"]
command_line = "-m pytest -v --reuse-db"
concurrency = ["greenlet"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "class .*\\(.*\\bProtocol\\b.*\\):",
    "@(?:typing\\.)?overload",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]
show_missing = true
skip_covered = true
skip_empty = true
precision = 2
fail_under = 100


[tool.deptry]
[tool.deptry.per_rule_ignores]
DEP002 = ["uvicorn", "uvloop", "asyncpg", "orjson"]

[tool.deptry.package_module_name_map]
uvloop = "uvloop"

[tool.mypy]
plugins = [
    "pydantic.mypy",
    "strawberry.ext.mypy_plugin",
]

strict = true
follow_imports = "normal"
ignore_missing_imports = false

allow_redefinition = false
disallow_any_explicit = false
ignore_errors = false
local_partial_types = true
no_implicit_optional = true
strict_optional = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true

pretty = true
show_column_numbers = true
show_error_codes = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true

[tool.ruff]
src = ["src", "tests"]
[tool.ruff.lint]
fixable = [
    "F",
    "E",
    "W",
    "I",
    "COM",
    "UP",
    "RUF",
]
unfixable = [
    "F841", # Variable  is assigned to but never used
]
select = ["ALL"]
ignore = [
    "E501", # Line Length
    "ANN101",
    "ANN102",
    "D10", # Disable mandatory docstrings
    "D203", # one-blank-line-before-class
    "D212", # multi-line-summary-first-line
    "PD", # pandas-vet
    "TCH001",
    "TCH002",
    "TCH003",
    "EXE",
    "COM812",  # ruff format conflict
    "ISC001",  # ruff format conflict
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"src/app/alembic/*" = ["INP001"]
"src/app/alembic/versions/*" = ["D400", "D415"]
"src/app/db/models/*" = ["A003"]
"src/app/*/schema.py" = ["A003"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.mccabe]
max-complexity = 6

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]
staticmethod-decorators = ["staticmethod"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"starlette.status".msg = "Use http.HTTPStatus instead."
"fastapi.status".msg = "Use http.HTTPStatus instead."
"litestar.status_codes".msg = "Use http.HTTPStatus instead."
"httpx.codes".msg = "Use http.HTTPStatus instead."
