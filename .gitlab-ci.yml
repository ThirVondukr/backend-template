image: tiangolo/docker-with-compose

stages:
  - lint
  - build

.lint-job: &lint_job
  image: python:3.10-slim
  stage: lint
  interruptible: true
  cache:
    - key:
        files:
          - poetry.lock
      paths:
        - .venv
        - .cache/pip
  only:
    changes:
      - "**/*.py"
      - poetry.lock
      - pyproject.toml

  before_script:
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install
  variables:
    GIT_STRATEGY: clone
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

mypy:
  <<: *lint_job
  script:
    - poetry run mypy .

black:
  <<: *lint_job
  script:
    - poetry run black . --check

isort:
  <<: *lint_job
  script:
    - poetry run isort . --check

flake8:
  <<: *lint_job
  script:
    - poetry run flake8

pytest:
  <<: *lint_job
  variables:
    POSTGRES_PASSWORD: password
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_TEST_URL: postgresql+asyncpg://postgres:password@postgres/postgres

  services:
    - postgres:14

  script:
    - export PYTHONPATH=$PYTHONPATH:./src
    - poetry run coverage run
    - poetry run coverage report -m
    - poetry run coverage xml
  coverage: "/^TOTAL.*\\s(\\d*)/"
  artifacts:
    reports:
      cobertura: coverage.xml

build-image:
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
  only:
    - dev
    - main
