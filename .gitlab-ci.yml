image: docker

stages:
  - lint
  - build
#  - deploy

.lint-job: &lint_job
  image: python:3.11-slim
  stage: lint
  interruptible: true
  cache:
    - key:
        files:
          - pdm.lock
      paths:
        - .venv
        - .cache/pip
    - key: $CI_COMMIT_REF_SLUG
      paths:
        - .ruff_cache
        - .mypy_cache
  only:
    changes:
      - "**/*.py"
      - pdm.lock
      - pyproject.toml

  before_script:
    - pip install pdm
    - pdm install
  variables:
    GIT_STRATEGY: clone
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

mypy:
  <<: *lint_job
  script:
    - pdm run mypy .

black:
  <<: *lint_job
  script:
    - pdm run black . --check

isort:
  <<: *lint_job
  script:
    - pdm run isort . --check

ruff:
  <<: *lint_job
  script:
    - pdm run ruff .

pytest:
  <<: *lint_job
  variables:
    POSTGRES_PASSWORD: password
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_TEST_URL: postgresql+asyncpg://postgres:password@postgres/postgres
    DATABASE_NAME: ""
    DATABASE_HOST: ""
    DATABASE_USERNAME: ""
    DATABASE_PASSWORD: ""

  services:
    - postgres:14

  script:
    - pdm run coverage run
    - pdm run coverage report -m
    - pdm run coverage xml
  coverage: "/^TOTAL.*\\s(\\d*)/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build-image:
  stage: build
  services:
    - name: docker:dind
      alias: docker

  variables:
    DOCKER_TLS_CERTDIR: ""
    RUNTIME_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    BRANCH_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
    BUILD_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH-build

  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $BUILD_IMAGE || true
    - docker pull $BRANCH_IMAGE || true

    - docker build --cache-from $BUILD_IMAGE --tag $BUILD_IMAGE --target build .
    - docker build --cache-from $BUILD_IMAGE --cache-from $BRANCH_IMAGE --tag $RUNTIME_IMAGE .

    - docker tag $RUNTIME_IMAGE $BRANCH_IMAGE
    - docker push $BUILD_IMAGE
    - docker push $RUNTIME_IMAGE
    - docker push $BRANCH_IMAGE
  only:
    - dev
    - main

#deploy:
#  image: alpine/helm:3.10.2
#  stage: deploy
#  variables:
#    APP_NAME: "fastapi-cookiecutter"
#    NAMESPACE: "dev"
#  script:
#    - >
#      helm upgrade $APP_NAME ./.k8s/app
#      --install
#      --namespace $NAMESPACE
#      --set image.repository=$CI_REGISTRY_IMAGE,image.tag=$CI_COMMIT_SHORT_SHA
#      -f ./.k8s/app/values.yaml
#      -f ./.k8s/app/values-production.yaml
#  when: never
#  only:
#    - main
